load csv from 'file:///shows.csv' as row with row, toInteger(row[0]) as id, row[1] as labels, row[2] as follows, row[3] as name, row[4] as surname, toInteger(row[5]) as start, toInteger(row[6]) as end, row[7] as type, toFloat(row[8]) as rating
where labels=":User"
create(:User{id:id, name:name, surname:surname})


load csv from 'file:///shows.csv' as row with row, toInteger(row[0]) as id, row[1] as labels, row[2] as follows, row[3] as name, row[4] as surname, toInteger(row[5]) as start, toInteger(row[6]) as end, row[7] as type, toFloat(row[8]) as rating
where labels=":Category"
create(:Category{id:id, name:name})


load csv from 'file:///shows.csv' as row with row, toInteger(row[0]) as id, row[1] as labels, row[2] as follows, row[3] as name, row[4] as surname, toInteger(row[5]) as start, toInteger(row[6]) as end, row[7] as type, toFloat(row[8]) as rating
where labels=":Show"
create(:Shows{id:id, name:name, followers:follows})

--watch relation
load csv from 'file:///shows.csv' as row with row, toInteger(row[0]) as id, row[1] as labels, row[2] as follows, row[3] as name, row[4] as surname, toInteger(row[5]) as start, toInteger(row[6]) as end, row[7] as type, toFloat(row[8]) as rating
where type="WATCH"
match(u:User) where u.id=start
match(s:Shows) where s.id=end
create (u)-[:WATCH{rating:rating}]->(s)

-- has category relation
load csv from 'file:///shows.csv' as row with row, toInteger(row[0]) as id, row[1] as labels, row[2] as follows, row[3] as name, row[4] as surname, toInteger(row[5]) as start, toInteger(row[6]) as end, row[7] as type, toFloat(row[8]) as rating
where type="HAS_CATEGORY"
match(s:Shows) where s.id=start
match(c:Category) where c.id=end
create (s)-[:HAS_CATEGORY]->(c)


-- Content Filtering
-- Recommend Shows for user - Tom Hardy
match(u:User{name:"Tom", surname:"Hardy"})-[:WATCH]->
(s:Shows)-[:HAS_CATEGORY]->(c:Category)<-[:HAS_CATEGORY]-(z:Shows) 
where not exists((u)-[:WATCH]->(z)) with s, z, count(c) as intersection
match (s)-[:HAS_CATEGORY]->(sc:Category)
with s, z, intersection, COLLECT(sc.name) as s1
match (z)-[:HAS_CATEGORY]->(zc:Category)
with s, z, s1, intersection, COLLECT(zc.name) as s2
with s, z, intersection, s1 + [x in s2 where not x in s1] as union, s1, s2
return s.name as UserShow, z.name as Recommendate, s1 as UserShowCategory, s2 as RecommendateShowCategory, ((1.0*intersection)/SIZE(union)) as jaccard order by jaccard desc

-- using libary function
match(u:User{name:"Tom", surname:"Hardy"})-[:WATCH]->
(s:Shows)-[:HAS_CATEGORY]->(c:Category)<-[:HAS_CATEGORY]-(z:Shows) 
where not exists((u)-[:WATCH]->(z)) with s, z
match(s)-[:HAS_CATEGORY]->(sc:Category)
with s, z, COLLECT(DISTINCT(id(sc))) as s1
match(z)-[:HAS_CATEGORY]->(zc:Category)
with s, z, s1, COLLECT(DISTINCT(id(zc))) as s2
with s, z, s1, s2
return s.name as UserShow, z.name as Recommendate, s1 as UserShowCategory, s2 as RecommendateShowCategory, gds.alpha.similarity.jaccard(s1, s2) as jaccard order by jaccard desc


-- Collaborative Filtering
match(s:Shows)
with collect(s.name) as shows
match(u:User{name:"Tom", surname:"Hardy"})-[:WATCH]->(z:Shows)
with shows, collect(z.name) as myshow, u 
with shows, myshow, gds.alpha.ml.oneHotEncoding(shows, myshow) as showu1, u
match(o:User)-[:WATCH]->(x:Shows)
where u<>o
with shows, collect(x.name) as otherusershow, myshow, showu1, o, u
with showu1, gds.alpha.ml.oneHotEncoding(shows, otherusershow) as showu2, o, u
with o, gds.similarity.cosine(showu1, showu2) as simindex, u
order by simindex desc limit 1
with o, u
match(o:User)-[:WATCH]->(s:Shows)
where not exists((u)-[:WATCH]->(s))
return s


